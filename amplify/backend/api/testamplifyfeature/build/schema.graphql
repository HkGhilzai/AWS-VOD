type Todo {
  id: ID!
  name: String!
  description: String
}

type vodAsset {
  id: ID!
  title: String!
  description: String!
  video: videoObject
}

type videoObject {
  id: ID!
  token: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelTodoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  getVodAsset(id: ID!): vodAsset
  listVodAssets(filter: ModelvodAssetFilterInput, limit: Int, nextToken: String): ModelvodAssetConnection
  getVideoObject(id: ID!): videoObject
  listVideoObjects(filter: ModelvideoObjectFilterInput, limit: Int, nextToken: String): ModelvideoObjectConnection
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
}

input DeleteTodoInput {
  id: ID
}

type Mutation {
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
  createVodAsset(input: CreateVodAssetInput!, condition: ModelvodAssetConditionInput): vodAsset
  updateVodAsset(input: UpdateVodAssetInput!, condition: ModelvodAssetConditionInput): vodAsset
  deleteVodAsset(input: DeleteVodAssetInput!, condition: ModelvodAssetConditionInput): vodAsset
  createVideoObject(input: CreateVideoObjectInput!, condition: ModelvideoObjectConditionInput): videoObject
  updateVideoObject(input: UpdateVideoObjectInput!, condition: ModelvideoObjectConditionInput): videoObject
  deleteVideoObject(input: DeleteVideoObjectInput!, condition: ModelvideoObjectConditionInput): videoObject
}

input ModelTodoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
}

type Subscription {
  onCreateTodo: Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo: Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo: Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreateVodAsset: vodAsset @aws_subscribe(mutations: ["createVodAsset"])
  onUpdateVodAsset: vodAsset @aws_subscribe(mutations: ["updateVodAsset"])
  onDeleteVodAsset: vodAsset @aws_subscribe(mutations: ["deleteVodAsset"])
  onCreateVideoObject: videoObject @aws_subscribe(mutations: ["createVideoObject"])
  onUpdateVideoObject: videoObject @aws_subscribe(mutations: ["updateVideoObject"])
  onDeleteVideoObject: videoObject @aws_subscribe(mutations: ["deleteVideoObject"])
}

type ModelvodAssetConnection {
  items: [vodAsset]
  nextToken: String
}

input ModelvodAssetFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  and: [ModelvodAssetFilterInput]
  or: [ModelvodAssetFilterInput]
  not: ModelvodAssetFilterInput
}

input CreateVodAssetInput {
  id: ID
  title: String!
  description: String!
  vodAssetVideoId: ID
}

input UpdateVodAssetInput {
  id: ID!
  title: String
  description: String
  vodAssetVideoId: ID
}

input DeleteVodAssetInput {
  id: ID
}

input ModelvodAssetConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  and: [ModelvodAssetConditionInput]
  or: [ModelvodAssetConditionInput]
  not: ModelvodAssetConditionInput
}

type ModelvideoObjectConnection {
  items: [videoObject]
  nextToken: String
}

input ModelvideoObjectFilterInput {
  id: ModelIDInput
  token: ModelStringInput
  and: [ModelvideoObjectFilterInput]
  or: [ModelvideoObjectFilterInput]
  not: ModelvideoObjectFilterInput
}

input CreateVideoObjectInput {
  id: ID
  token: String
}

input UpdateVideoObjectInput {
  id: ID!
  token: String
}

input DeleteVideoObjectInput {
  id: ID
}

input ModelvideoObjectConditionInput {
  token: ModelStringInput
  and: [ModelvideoObjectConditionInput]
  or: [ModelvideoObjectConditionInput]
  not: ModelvideoObjectConditionInput
}
